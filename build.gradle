import org.springframework.boot.gradle.tasks.bundling.BootJar

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.8'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.hidetake.swagger.generator' version '2.18.2'
    id 'com.epages.restdocs-api-spec' version '0.16.2'
    id "co.uzzu.dotenv.gradle" version "2.0.0"
    id 'jacoco'
}

group = 'com.prgrms'
version = '1.0.2'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    springCloudVersion = "2021.0.2"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
jar {
    enabled = false
}

swaggerSources {
    sample {
        setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
    }
}

openapi3 {
    setServer(env.MY_SERVER.orElse("http://localhost:8080")) // Swagger 서버 설정
    title = "KKINI API Document"
    description = "Spring REST Docs with SwaggerUI."
    version = "1.0.2"
    format = "yaml"
}

dependencies {
    // Spring Boot Starter
    // WEB
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    testImplementation 'org.springframework.security:spring-security-test'
    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // Test & Config
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0" // lombok 에서 mapstruct binding 해주는 기능
    //MySQL Driver
    runtimeOnly 'com.mysql:mysql-connector-j'
    //H2 Driver
    runtimeOnly 'com.h2database:h2'
    // RestDocs API SPEC
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.2'
    // Swagger UI
    swaggerUI 'org.webjars:swagger-ui:4.11.1'
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    // P6spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.1'

    // https://mvnrepository.com/artifact/org.hibernate/hibernate-spatial
    implementation 'org.hibernate:hibernate-spatial'
    //https://mvnrepository.com/artifact/org.locationtech.jts/jts-core
    implementation 'org.locationtech.jts:jts-core:1.19.0'
    // logback - cloudwatch
    implementation 'ca.pjer:logback-awslogs-appender:1.6.0'
    // AWS
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    // Slack Notification
    implementation 'net.gpedro.integrations.slack:slack-webhook:1.4.0'
    // Websocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    // RabbitMQ
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    // 외부 브로커를 사용하기 위해
    implementation 'org.springframework.boot:spring-boot-starter-reactor-netty:2.4.6'
    //jackson2json에서 LocalDateTime을 handling 하기 위해
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.4'

    // Sentry
    implementation 'io.sentry:sentry-spring-boot-starter:6.17.0'
    implementation 'io.sentry:sentry-logback:6.17.0'
    // WireMock
    implementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
    // Embedded Redis
    testImplementation 'it.ozimov:embedded-redis:0.7.2'
    // Cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    //https://velog.io/@saintho/javaxannotationmetawhennotfound
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

tasks.withType(GenerateSwaggerUI).configureEach {
    dependsOn 'openapi3'
}

tasks.register('copySwaggerUI', Copy) {
    dependsOn 'generateSwaggerUISample'
    dependsOn "jar"
    dependsOn "bootJarMainClassName"

    def generateSwaggerUISampleTask = tasks.named('generateSwaggerUISample', GenerateSwaggerUI).get()

    from("${generateSwaggerUISampleTask.outputDir}")
    into("${project.buildDir}/resources/main/static/docs/")

    doLast {
        println('---replace \'full\' text to \'none\' ----')
        def indexFile = file("${project.buildDir}/resources/main/static/docs/index.html")

        def contents = indexFile.getText("UTF-8")
        def newFileContents = contents.replace('full', 'none')
        indexFile.write(newFileContents)
        println('---- replace end.-----')
    }
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

tasks.withType(BootJar).configureEach {
    dependsOn 'copySwaggerUI'
}

jacocoTestReport {
    dependsOn test
    finalizedBy 'jacocoTestCoverageVerification'
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }

            excludes = [
                    '*.utils.*',
                    '*.dto.*',
                    '*.exception.*',
                    '*.scheduler.*',
                    '*.common.*',
                    '*.mapper.*',
                    '*.log.*',
                    '*.chat.*',
                    '*.notification.*',
            ]

        }

    }
}



